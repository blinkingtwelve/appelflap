@file:JvmName("CLI")

package org.nontrivialpursuit.eekhoorn

import org.apache.commons.cli.*
import org.eclipse.jetty.util.log.Log
import org.nontrivialpursuit.ingeblikt.JDBCCacheDBOps
import org.nontrivialpursuit.ingeblikt.KOEKOEK_SUBDIR
import org.nontrivialpursuit.ingeblikt.PKIOps.JKSPKIOps
import java.io.File

object CLI {
    @JvmStatic
    fun main(args: Array<String>) {
        val options = Options()
        options.addOption(Option(
            null, "port", true, "port number (auto-picked if unspecified)"
        ).also { it.setType(Int::class.java) })
        options.addOption(
            Option(
                null, "credentials", true, "HTTP Basic Auth credentials (autogenerated if unspecified)"
            )
        )
        options.addOption(
            Option(
                null, "storagedir", true, "directory to serve from & store to"
            )
        )
        options.addOption(
            Option(
                null, "profiledir", true, "Firefox profile directory"
            )
        )
        options.addOption(
            Option(
                null, "keystore", true, "JKS keystore filename. Will be created if it doesn't exist."
            )
        )
        options.addOption(
            Option(
                null, "commonname", true, "Device certificate common name"
            )
        )
        options.addOption(
            Option(
                null, "applicationID", true, "Application ID"
            )
        )

        val parser: CommandLineParser = DefaultParser()
        val formatter = HelpFormatter()
        val cmd: CommandLine
        try {
            cmd = parser.parse(options, args)
            val portno = cmd.getOptionValue("port", "0").toInt(10)
            val basedir = cmd.getOptionValue("storagedir")
            val credentials = cmd.getOptionValue("credentials", null)
            val pkiOps = JKSPKIOps(
                cmd.getOptionValue("commonname"), cmd.getOptionValue("applicationID"), File(cmd.getOptionValue("keystore"))
            )
            val koekoekBridge = KoekoeksNest(
                JDBCCacheDBOps(), File(cmd.getOptionValue("profiledir")), File(File(basedir), KOEKOEK_SUBDIR), pkiOps
            )
            val logger = Log.getLogger(HttpEekhoorn::class.java.name)
            val eekhoorn = HttpEekhoorn(
                File(basedir), portno, credentials, pkiOps = pkiOps, koekoekBridge = koekoekBridge
            )
            logger.info("Credentials: ${eekhoorn.credentials.first}:${eekhoorn.credentials.second}")
            eekhoorn.join()
        } catch (e: ParseException) {
            println(e.message)
            formatter.printHelp("eekhoorn.jar", options)
            System.exit(1)
        } catch (e: NullPointerException){
            formatter.printHelp("eekhoorn.jar", options)
            System.exit(1)
        } catch (e: InterruptedException) {
            e.printStackTrace()
            System.exit(1)
        }
    }
}